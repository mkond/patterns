Определение

Если конкретная фабрика позволяет выбрать одну конкретную реализацию из одного семейства возможных для того, 
чтобы создать объект, то абстрактная фабрика позволяет выбрать конкретную реализацию фабрики из семейства 
возможных фабрик. То есть речь идет о абстракции более высокого уровня.

Когда используется и в чем его достоинства:
-Создает семейство связанных или зависимых объектов
-Предоставляет библиотеку объектов, открывая интерфейс, а не конкретные реализации.
-Требуется для изоляции конкретных классов от их родительских классов.
-Используется если система должна быть независимой от того, как ее объекты созданы, составлены и представлены.
-Вводит ограничения.
-Является альтернативой шаблону фасад при скрытии платформенно-зависимых классов.
-Легко расширять на новую систему или семейство объектов.

Пример
Предположим, что разрабатывается некое приложение, интерфейс пользователя которого содержит три модуля, 
представленных соответствующими классами: Locale (весь текст интерфейса), Images (картинки, баннеры) и 
Help (справка пользователя). Представим себе, что приложение предназначено для США и Японии. 
И в зависимости от того, какая страна выбрана в его настройках, 
должен загружаться соответствующий интерфейс: английская или японская локализация, баннеры, справка. 
Шаблон абстрактной фабрики подсказывает нам решение задачи в том, чтобы представить Locale, Images и 
Help интерфейсами, создать для них нужные нам реализации, а затем написать интерфейс фабрики UIAbstractFactory,
 в котором будут указаны фабричные методы, инициализирующие необходимые нам объекты. 
 Далее мы пишем две реализации фабрики, в котором имплементируем эти методы, а в коде нашего приложения 
 просто выбираем, какую из фабрик мы хотим использовать, основываясь на параметре.